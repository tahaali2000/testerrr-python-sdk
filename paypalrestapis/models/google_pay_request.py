# -*- coding: utf-8 -*-

"""
paypalrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from paypalrestapis.api_helper import APIHelper
from paypalrestapis.models.google_pay_card_attributes import GooglePayCardAttributes
from paypalrestapis.models.google_pay_decrypted_token_data import GooglePayDecryptedTokenData
from paypalrestapis.models.phone_number_with_country_code import PhoneNumberWithCountryCode


class GooglePayRequest(object):

    """Implementation of the 'Google Pay Request' model.

    Information needed to pay using Google Pay.

    Attributes:
        name (str): The full name representation like Mr J Smith.
        email_address (str): The internationalized email
            address.<blockquote><strong>Note:</strong> Up to 64 characters are
            allowed before and 255 characters are allowed after the
            <code>@</code> sign. However, the generally accepted maximum
            length for an email address is 254 characters. The pattern
            verifies that an unquoted <code>@</code> sign exists.</blockquote>
        phone_number (PhoneNumberWithCountryCode): The phone number in its
            canonical international [E.164 numbering plan
            format](https://www.itu.int/rec/T-REC-E.164/en).
        card (Any): The payment card information.
        decrypted_token (GooglePayDecryptedTokenData): Details shared by
            Google for the merchant to be shared with PayPal. This is required
            to process the transaction using the Google Pay payment method.
        assurance_details (Any): The model property of type Any.
        attributes (GooglePayCardAttributes): Additional attributes associated
            with the use of this card.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "email_address": 'email_address',
        "phone_number": 'phone_number',
        "card": 'card',
        "decrypted_token": 'decrypted_token',
        "assurance_details": 'assurance_details',
        "attributes": 'attributes'
    }

    _optionals = [
        'name',
        'email_address',
        'phone_number',
        'card',
        'decrypted_token',
        'assurance_details',
        'attributes',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 email_address=APIHelper.SKIP,
                 phone_number=APIHelper.SKIP,
                 card=APIHelper.SKIP,
                 decrypted_token=APIHelper.SKIP,
                 assurance_details=APIHelper.SKIP,
                 attributes=APIHelper.SKIP):
        """Constructor for the GooglePayRequest class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if email_address is not APIHelper.SKIP:
            self.email_address = email_address 
        if phone_number is not APIHelper.SKIP:
            self.phone_number = phone_number 
        if card is not APIHelper.SKIP:
            self.card = card 
        if decrypted_token is not APIHelper.SKIP:
            self.decrypted_token = decrypted_token 
        if assurance_details is not APIHelper.SKIP:
            self.assurance_details = assurance_details 
        if attributes is not APIHelper.SKIP:
            self.attributes = attributes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        email_address = dictionary.get("email_address") if dictionary.get("email_address") else APIHelper.SKIP
        phone_number = PhoneNumberWithCountryCode.from_dictionary(dictionary.get('phone_number')) if 'phone_number' in dictionary.keys() else APIHelper.SKIP
        card = dictionary.get("card") if dictionary.get("card") else APIHelper.SKIP
        decrypted_token = GooglePayDecryptedTokenData.from_dictionary(dictionary.get('decrypted_token')) if 'decrypted_token' in dictionary.keys() else APIHelper.SKIP
        assurance_details = dictionary.get("assurance_details") if dictionary.get("assurance_details") else APIHelper.SKIP
        attributes = GooglePayCardAttributes.from_dictionary(dictionary.get('attributes')) if 'attributes' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   email_address,
                   phone_number,
                   card,
                   decrypted_token,
                   assurance_details,
                   attributes)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'email_address={(self.email_address if hasattr(self, "email_address") else None)!r}, '
                f'phone_number={(self.phone_number if hasattr(self, "phone_number") else None)!r}, '
                f'card={(self.card if hasattr(self, "card") else None)!r}, '
                f'decrypted_token={(self.decrypted_token if hasattr(self, "decrypted_token") else None)!r}, '
                f'assurance_details={(self.assurance_details if hasattr(self, "assurance_details") else None)!r}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'email_address={(self.email_address if hasattr(self, "email_address") else None)!s}, '
                f'phone_number={(self.phone_number if hasattr(self, "phone_number") else None)!s}, '
                f'card={(self.card if hasattr(self, "card") else None)!s}, '
                f'decrypted_token={(self.decrypted_token if hasattr(self, "decrypted_token") else None)!s}, '
                f'assurance_details={(self.assurance_details if hasattr(self, "assurance_details") else None)!s}, '
                f'attributes={(self.attributes if hasattr(self, "attributes") else None)!s})')
